---
import type { CSSProperty } from "astro/types";

interface Props {
  width?: number;
  animateTo?: number;
  weight?: number;
  angle?: number;
}

const { width = 48, animateTo, weight = 2, angle = 0 } = Astro.props;
---

<astro-arrow data-anim-to={animateTo}></astro-arrow>

<style
  lang="scss"
  define:vars={{
    width: `${width}px`,
    weight: `${weight}px`,
    angle: `${angle}deg`,
  }}
>
  astro-arrow {
    --width: 48px;
    --weight: 2px;

    display: block;
    position: relative;
    background-color: currentColor;
    width: var(--width);
    height: var(--weight);
    transform: rotate(var(--angle));

    &::after {
      content: "";
      position: absolute;
      right: 0;
      top: 50%;
      background-color: currentColor;
      height: var(--weight);
      width: 12px;
      transform-origin: center right;
      transform: translateY(-20%) translateX(1px) rotate(45deg);
      border-radius: var(--weight);
    }

    &::before {
      content: "";
      position: absolute;
      right: 0px;
      top: 50%;
      background-color: currentColor;
      height: var(--weight);
      width: 12px;
      transform-origin: center right;
      transform: translateY(-80%) translateX(1px) rotate(-45deg);
      border-radius: var(--weight);
    }
  }
</style>

<script>
  import { gsap } from "gsap";

  class Arrow extends HTMLElement {
    constructor() {
      super();

      const animTo = this.dataset.animTo;

      if (animTo != null && !isNaN(parseInt(animTo))) {
        this.playAnimation(parseInt(animTo));
      }
    }

    playAnimation(to: number) {
      gsap.to(this, {
        width: to,
        duration: 1,
        yoyo: true,
        yoyoEase: true,
        repeat: -1,
      });
    }
  }

  customElements.define("astro-arrow", Arrow);
</script>
