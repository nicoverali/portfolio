---
import Button from "@components/Button/Button.astro";
import GridCol from "@components/Grid/GridCol.astro";
import GridRow from "@components/Grid/GridRow.astro";
import { Icon } from "astro-icon/components";
---

<astro-my-name-anim-container>
  <div class="my-name">
    <GridRow>
      <GridCol xs={12}>
        <div class="content">
          <h1>
            <span>Hey ! I'm Nicolás Vera</span><br />
            <span>I design and develop</span>
            <span>thoughtful solutions</span>
            <span
              >centered on <span class="highlight">user's experience.</span
              >—</span
            >
          </h1>
          <div class="asterisk-list">
            <p>Software Engineer</p>
            <Icon is:inline={true} name="asterisk" />
            <p>Buenos Aires</p>
            <Icon is:inline={true} name="asterisk" />
            <p>Argentina</p>
          </div>
        </div>
      </GridCol>
    </GridRow>

    <GridRow>
      <GridCol xs={12}>
        <div class="buttons">
          <Button href="">Download CV</Button>
          <Button href="" outline>Contact me</Button>
        </div>
      </GridCol>
    </GridRow>
    <GridRow>
      <GridCol xs={12}>
        <div class="line"></div>
      </GridCol>
    </GridRow>
  </div>
</astro-my-name-anim-container>

<style>
  .my-name {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .content {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: start;

    h1 {
      text-align: start;
      margin-top: var(--spacing-lg);
      margin-bottom: var(--spacing-lg);
      font-size: var(--font-size-display);
      font-weight: 600;

      .highlight {
        color: var(--color-secondary);
      }
    }

    .asterisk-list {
      display: flex;
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
      gap: var(--spacing-md);
      font-size: var(--font-size-h4);

      p {
        margin: 0;
      }

      svg {
        width: 8px;
        height: 8px;
      }
    }
  }

  .buttons {
    width: 100%;
    flex: 1;
    display: flex;
    flex-direction: row;
    justify-content: start;
    margin-top: var(--spacing-2xl);
    margin-bottom: var(--spacing-2xl);
    gap: var(--spacing-md);
  }

  .line {
    width: 100%;
    margin-bottom: var(--spacing-md);
    border-bottom: 1px solid black;
  }
</style>

<script>
  import { gsap } from "gsap";
  import { vhPercent } from "@scripts/utils/gsap";

  class MyNameAnimContainer extends HTMLElement {
    constructor() {
      super();
      gsap.context(() => {
        this.getShowSectionAnim(75);
        this.getTextHighlightAnim(50, 70);
      }, this);
    }

    getShowSectionAnim(startPercent: number) {
      gsap.fromTo(
        ".my-name > *",
        { opacity: 0, x: -20 },
        {
          ease: "expo.inOut",
          opacity: 1,
          x: 0,
          duration: 0.5,
          stagger: 0.1,
          scrollTrigger: {
            trigger: ".my-name",
            start: () => "top " + vhPercent(startPercent),
            end: "bottom top",
            toggleActions: "play none none reverse",
          },
        }
      );
    }

    getTextHighlightAnim(startPercent: number, endPercent: number) {
      const tl = gsap.timeline({
        scrollTrigger: {
          trigger: "h1",
          start: () => "top " + vhPercent(startPercent),
          end: "bottom " + vhPercent(endPercent),
          scrub: 0.5,
          invalidateOnRefresh: true,
        },
      });

      const spans = gsap.utils.toArray<HTMLElement>("h1 > span");

      spans.map((span, i, all) => {
        const ease = i === all.length - 1 ? "power4.out" : "slow(0.3, 0, true)";
        tl.fromTo(
          span,
          { opacity: 0.2, filter: "grayscale(1)" },
          { ease, duration: 1, opacity: 1, filter: "grayscale(0)" },
          ">-=0.3"
        );
      });

      tl.to(
        spans,
        { duration: 0.5, opacity: 1, filter: "grayscale(0)" },
        ">-=0.3"
      );
    }
  }

  customElements.define("astro-my-name-anim-container", MyNameAnimContainer);
</script>
