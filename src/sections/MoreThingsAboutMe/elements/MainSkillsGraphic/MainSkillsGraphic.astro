---
import { Icon } from "astro-icon/components";
---

<astro-main-skills>
  <div class="circle-container">
    <div class="circle">
      <div class="skill-box">
        <Icon name={"skills/React"} />
      </div>
    </div>
  </div>

  <div class="circle-container">
    <div class="circle">
      <div class="skill-box">
        <Icon name={"skills/Typescript"} />
      </div>
    </div>
  </div>

  <div class="circle-container">
    <div class="circle">
      <div class="skill-box">
        <Icon name={"skills/Java"} />
      </div>
    </div>
  </div>
  <div class="draggable"></div>
</astro-main-skills>

<style lang="scss">
  astro-main-skills {
    display: block;
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  .draggable {
    transform-origin: bottom center;
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    width: 100%;
  }

  .circle-container {
    position: absolute;
    left: 50%;
    top: 0;
    transform: translateX(-50%);
    width: 100%;
    height: 100%;

    --dash-num: 20; /* control the number of dashes */
    --dash-distance: 8deg; /* control the distance between dashes */
    --dash-width: 1px; /* control the thickness of border*/

    &:nth-child(1) {
      --dash-num: 20;
      width: 100%;

      .skill-box {
        top: -5%;
        left: 55%;
      }
    }

    &:nth-child(2) {
      --dash-num: 16;
      width: 80%;

      .skill-box {
        left: 10%;
        top: 3%;
      }
    }

    &:nth-child(3) {
      --dash-num: 13;
      width: 60%;

      .skill-box {
        left: 75%;
        top: 5%;
      }
    }
  }

  .circle {
    position: absolute;
    width: 100%;
    height: 0;
    padding-top: 100%;

    top: 100%;
    transform: translateY(-50%);

    &::after {
      content: "";
      position: absolute;
      inset: 0;
      border-radius: 50%;
      padding: var(--dash-width);
      background: var(--color-text-on-paper);
      opacity: 0.15;
      mask:
        linear-gradient(#0000 0 0) content-box,
        repeating-conic-gradient(
          from calc(var(--dash-distance) / 2),
          #000 0 calc(360deg / var(--dash-num) - var(--dash-distance)),
          #0000 0 calc(360deg / var(--dash-num))
        );
      mask-composite: intersect;
    }
  }

  .skill-box {
    position: absolute;
    z-index: 1;
    padding: var(--spacing-sm);
    border-radius: var(--radius-md);
    background-color: var(--color-paper-on-paper);
    border: 1px solid var(--color-paper-border-on-paper);
    width: 48px;
    height: 48px;

    svg {
      width: 100%;
      height: 100%;
    }
  }
</style>

<script>
  import rotateCirclesBasedOnDraggable from "./scripts/rotateCirclesBasedOnDraggable";
  import pushCirclesOnMouseEnter from "./scripts/pushCirclesOnMouseEnter";
  import CircleRotationAnimation from "./scripts/CircleRotationAnimation";

  class MainSkillsContainer extends HTMLElement {
    private draggableElement: HTMLElement | null;
    private circles: Array<HTMLElement>;

    constructor() {
      super();
      this.draggableElement = this.querySelector<HTMLElement>(".draggable");
      this.circles = Array.from(this.querySelectorAll<HTMLElement>(".circle"));
      this.setupAnimations();
    }

    private setupAnimations() {
      if (!this.draggableElement) {
        console.warn("Missing draggable element in MainSkillsContainer");
        return;
      }

      const circlesAnim = this.circles.map(
        (circle) =>
          new CircleRotationAnimation(circle, {
            maxRotation: 360,
            pushRotation: 20,
            speed: 1,
          })
      );

      pushCirclesOnMouseEnter(this, circlesAnim);
      rotateCirclesBasedOnDraggable(this.draggableElement, circlesAnim);
    }
  }

  customElements.define("astro-main-skills", MainSkillsContainer);
</script>
