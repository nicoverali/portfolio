---
import {
  GOOEY_CLASS_NAME,
  GOOEY_ATTR_PADDING,
  GOOEY_ATTR_DEBUG_ID,
  GOOEY_ATTR_DEBUG,
} from "./scripts/attributes";

interface Props {
  id: string;
  triggerPadding?: number;
  debug?: boolean;
  blur?: number;
  contrastA?: number;
  contrastB?: number;
}

const {
  triggerPadding,
  id,
  debug,
  blur = 10,
  contrastA = 30,
  contrastB = -11,
} = Astro.props;

const fitlerId = `gooey-filter-${id}`;
const filterUrl = `url(#${fitlerId})`;
const gooeyAttrs: { [k: string]: any } = {};
gooeyAttrs[`data-${GOOEY_ATTR_PADDING}`] = triggerPadding;
gooeyAttrs[`data-${GOOEY_ATTR_DEBUG_ID}`] = id;
gooeyAttrs[`data-${GOOEY_ATTR_DEBUG}`] = debug;
---

<div class={GOOEY_CLASS_NAME} {...gooeyAttrs}>
  <svg style="display: none;" xmlns="http://www.w3.org/2000/svg" version="1.1">
    <defs>
      <filter id={fitlerId}>
        <feGaussianBlur in="SourceGraphic" stdDeviation={blur} result="blur"
        ></feGaussianBlur>
        <feColorMatrix
          in="blur"
          mode="matrix"
          values={`1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 ${contrastA} ${contrastB}`}
          result="goo"></feColorMatrix>
        {!debug && <feBlend in="SourceGraphic" in2="goo" />}
      </filter>
    </defs>
  </svg>
  <slot />
</div>

<style lang="scss" define:vars={{ filterUrl }}>
  .gooey-container {
    display: inline-block;

    &.active {
      filter: var(--filterUrl);
    }
  }
</style>
