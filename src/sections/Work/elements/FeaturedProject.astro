---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import BrowserMockup from "./BrowserMockup.astro";
import LinkButton from "@components/LinkButton/LinkButton.astro";

interface Props {
  project: CollectionEntry<"projects">;
}

const { project } = Astro.props;
const { featured, name, description, techs, repository, demo } = project.data;
---

<astro-featured-project class="container" data-analytics={name}>
  <div class="image-container">
    {
      featured.hasMockup ? (
        <Image src={featured.image} alt={`Screenshot of ${name} app`} />
      ) : (
        <BrowserMockup>
          <Image src={featured.image} alt={`Screenshot of ${name} app`} />
        </BrowserMockup>
      )
    }
  </div>

  <div class="bottom">
    <h3>{description}</h3>
    <p class="techs">{techs.join(", ")}</p>
    <div class="links">
      {
        demo && (
          <LinkButton size="text-small" href={demo} target="_blank">
            Visit Page
          </LinkButton>
        )
      }
      {
        repository && (
          <LinkButton size="text-small" href={repository} target="_blank">
            View Repository
          </LinkButton>
        )
      }
    </div>
  </div>
</astro-featured-project>

<style
  lang="scss"
  define:vars={{
    color: featured.color,
    colorDark: featured.colorDark ?? featured.color,
  }}
>
  @import "../../../styles/screens.scss";

  .container {
    position: relative;
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .image-container {
    position: relative;
    overflow: hidden;
    width: 100%;
    display: flex;
    border-radius: var(--radius-md);
    background-color: var(--color, #f1f1f1);
    padding: var(--spacing-3xl) var(--spacing-2xl);

    &.dark {
      background-color: var(--colorDark, #f1f1f1);
    }

    @media screen and (max-width: $screen-sm-min) {
      padding: var(--spacing-2xl) var(--spacing-lg);
    }

    img {
      display: block;
      opacity: 0.9;
      width: 100%;
      height: auto;
      object-fit: cover;
      object-position: 50% 50%;
      flex: 1;
      transition: opacity 200ms ease;
    }
  }

  img:hover {
    opacity: 1;
  }

  .bottom {
    margin-top: var(--spacing-md);

    h3 {
      font-size: var(--font-size-text);
      font-weight: 400;
      margin-bottom: var(--spacing-sm);
    }

    .techs {
      font-size: var(--font-size-text-small);
      font-weight: 400;
      opacity: 0.6;
    }
  }

  .links {
    margin-top: var(--spacing-lg);
    display: flex;
    flex-direction: column;
    align-items: start;
    gap: var(--spacing-md);
    opacity: 0.6;
  }
</style>

<script>
  import { triggerEvent } from "@scripts/analytics/analytics";
  import { isDarkMode } from "@scripts/stores";

  class FeaturedProject extends HTMLElement {
    constructor() {
      super();
      const imageContainer = this.querySelector(".image-container");
      isDarkMode.subscribe((isDarkMode) =>
        imageContainer?.classList.toggle("dark", isDarkMode)
      );

      this.setupAnalytics();
    }

    private setupAnalytics() {
      const projectName = this.dataset.analytics ?? "unknown";

      this.querySelectorAll(".links a").forEach((link) => {
        link.addEventListener("click", () => {
          triggerEvent({
            name: "project-link-out",
            payload: {
              href: link.getAttribute("href") ?? "",
              project: projectName,
            },
          });
        });
      });

      this.querySelector(".image-container")?.addEventListener("click", () => {
        triggerEvent({
          name: "project-image-clicked",
          payload: { project: projectName },
        });
      });
    }
  }

  customElements.define("astro-featured-project", FeaturedProject);
</script>
