---

---

<div id="cursor">
  <p class="label"></p>
</div>

<style lang="scss">
  div {
    /* display: none; */
    position: fixed;
    display: flex;
    align-items: center;
    justify-content: center;
    pointer-events: none;
    z-index: 9999;
    background-color: var(--color-secondary);
    height: 24px;
    width: 24px;
    border-radius: 100%;

    .label {
      opacity: 0;
    }
  }
</style>

<script>
  import { gsap } from "gsap";
  import VirtualCursor from "./scripts/VirtualCursor";
  import { onScroll } from "@scripts/scroll";
  import { BUTTON_CURSOR_CLASS } from "./scripts/VirtualCursor";
  import { GOOEY_CLASS_NAME } from "@components/Gooey/scripts/attributes";
  import GooeyContainer from "@components/Gooey/scripts/GooeyContainer";

  class Cursor {
    private cursor: HTMLElement;

    private cursorShowTween = gsap.from("#cursor", {
      ease: "bounce.out",
      scale: 0,
      paused: true,
    });

    private cursorDownTween = gsap.to("#cursor", {
      scale: 0.7,
      duration: 0.3,
      paused: true,
      overwrite: true,
    });

    // private cursorUpTween = gsap.to("#cursor", {
    //   scale: 1,
    //   paused: true,
    //   overwrite: true,
    // });

    private cursorToButtonTween = gsap.to("#cursor", {
      padding: "--var(spacing-md)",
    });

    private labelShowTween = gsap.to("#cursor .label", {
      opacity: 1,
    });

    private labelHideTween = gsap.to("#cursor .label", {
      opacity: 0,
    });

    private cursorToIdleTween = gsap.to("#cursor", {
      padding: 0,
    });

    constructor(cursor: HTMLElement) {
      this.cursor = cursor;

      document.addEventListener("mouseup", () => {
        this.cursorDownTween.reversed(true);
        this.cursorDownTween.resume();
      });

      document.addEventListener("mousedown", () => {
        this.cursorDownTween.reversed(false);
        this.cursorDownTween.resume();
      });
      document.addEventListener("mouseover", (e: MouseEvent) => {
        if (
          (e.target as HTMLElement)?.classList?.contains(BUTTON_CURSOR_CLASS)
        ) {
          this.cursor
            .querySelectorAll(".label")
            .forEach(
              (label) =>
                (label.textContent =
                  (e.target as HTMLElement)?.dataset?.label ?? null)
            );
          this.cursorToButtonTween.play();
          this.labelShowTween.play();
        } else {
          this.cursorToIdleTween.play();
          this.labelHideTween.play();
        }
      });

      document.addEventListener(
        "mousemove",
        () => {
          this.cursor.style.display = "initial";
          this.cursorShowTween.play();
        },
        { once: true }
      );
    }
  }

  const cursorEl = document.getElementById("cursor");
  const gooeyContainers = Array.from(
    document.getElementsByClassName(GOOEY_CLASS_NAME)
  ).map((el) => new GooeyContainer(el as HTMLElement));
  if (cursorEl) {
    new Cursor(cursorEl);
    const virtualCursor = new VirtualCursor(cursorEl, gooeyContainers);

    onScroll((scroll) => {
      virtualCursor.updateScroll(scroll);
    });

    document.addEventListener("mousemove", (e) => {
      virtualCursor.updateRealCursor(e.x, e.y);
    });
    document.addEventListener("pointermove", (e) => {
      virtualCursor.updateRealCursor(e.x, e.y);
    });
  }
</script>
