---
import Button from "@components/Button/Button.astro";
import Footer from "@components/Footer/Footer.astro";
import Column from "@components/Grid/Column.astro";
import Row from "@components/Grid/Row.astro";
import LinkButton from "@components/LinkButton/LinkButton.astro";
---

<astro-contact class="container">
  <Row>
    <Column offset={{ md: 3 }}>
      <div class="header">
        <p>Got something great in mind ?</p>
        <p>Let's build together.</p>
      </div>

      <div class="email">
        <Button
          ><span class="text">nicolasalevera98@gmail.com</span><span
            class="hidden">Copied!</span
          ></Button
        >
        <p class="sub">Click to copy</p>
      </div>

      <div class="links">
        <LinkButton>CV</LinkButton>
        <LinkButton>Github</LinkButton>
        <LinkButton>LinkedIn</LinkButton>
      </div>

      <Footer />
    </Column>
  </Row>
</astro-contact>

<style lang="scss">
  .container {
    height: 100svh;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  .header {
    font-size: var(--font-size-h1);
    font-weight: 500;
    line-height: 150%;

    p {
      text-wrap: balanced;
      text-wrap: pretty;
    }
  }

  .email {
    cursor: pointer;
    margin-top: var(--spacing-lg);
    font-size: var(--font-size-text);
    font-weight: 600;

    .hidden {
      position: absolute;
      top: 100%;
      text-decoration: none;
    }

    .sub {
      margin-top: var(--spacing-md);
      font-size: var(--font-size-caption);
      font-weight: 400;
      opacity: 0.6;
    }
  }

  .links {
    margin-top: var(--spacing-2xl);
    margin-bottom: var(--spacing-xl);
    display: flex;
    flex-direction: row;
    gap: var(--spacing-lg);
  }
</style>

<script>
  import { gsap } from "gsap";

  class Contact extends HTMLElement {
    constructor() {
      super();
      this.setupAnimations();
    }

    private setupAnimations() {
      const emailButton = this.querySelector(".email");
      const email = emailButton?.querySelector(".text");
      const hiddenText = emailButton?.querySelector(".hidden");

      if (!email || !hiddenText) return;

      const animation = this.getShowHiddenTextAnimation(email, hiddenText);

      emailButton?.addEventListener("click", () => {
        navigator.clipboard.writeText(email.innerHTML);
        animation.restart();
      });
    }

    private getShowHiddenTextAnimation(
      email: Element,
      hiddenText: Element
    ): gsap.core.Timeline {
      const tl = gsap.timeline({ paused: true });

      tl.to(email, {
        duration: 0.2,
        yPercent: -200,
      });

      tl.to(
        hiddenText,
        {
          duration: 0.2,
          ease: "back.out(1)",
          top: "50%",
          yPercent: -50,
        },
        "<"
      );

      tl.to(hiddenText, {
        delay: 1.5,
        duration: 0.2,
        top: 0,
        yPercent: -200,
      });

      tl.set(email, { yPercent: 100 });
      tl.to(email, {
        ease: "back.out(1)",
        duration: 0.2,
        yPercent: 0,
      });
      tl.set(hiddenText, {
        clearProps: "all",
      });

      return tl;
    }
  }

  customElements.define("astro-contact", Contact);
</script>
