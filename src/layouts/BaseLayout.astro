---
interface Props {
  title: string;
}

import "@styles/normalize.css";
import "@styles/global.scss";
import "@styles/screens.scss";
import "@styles/lenis.scss";

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>

    <link rel="icon" type="image/x-icon" href="favicon.ico" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700&display=swap"
      rel="stylesheet"
    />
    <meta name="theme-color" content="" />
  </head>
  <body>
    <slot />
  </body>
</html>

<style></style>

<script>
  import { setupGSAP } from "@scripts/gsap";
  import { setupLenis, toggleScroll } from "@scripts/scroll";
  import { isMobileNavOpen, isDarkMode } from "@scripts/stores";

  setupGSAP();
  setupLenis();

  const root = document.documentElement;
  const metaTag = document.querySelector("meta[name='theme-color']");

  isMobileNavOpen.subscribe(updateThemeColor);
  isMobileNavOpen.subscribe((isMobileNavOpen) =>
    toggleScroll(!isMobileNavOpen)
  );
  isDarkMode.subscribe(updateThemeColor);

  function updateThemeColor() {
    const style = getComputedStyle(root);
    const backgroundColor = style.getPropertyValue("--color-background");
    const mobileNavColor = style.getPropertyValue("--el-mobile-nav-background");
    metaTag?.setAttribute(
      "content",
      isMobileNavOpen.get() ? mobileNavColor : backgroundColor
    );
  }
</script>
