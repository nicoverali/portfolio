---
import { Icon } from "astro-icon/components";
---

<div class="container">
  <astro-figma class="editable-container">
    <Icon name="skills/Figma" class="figma-icon" />
    <div class="resize-handle topleft" data-resize-dir="topleft">
      <div class="handle-ui"></div>
    </div>
    <div class="resize-handle topright" data-resize-dir="topright">
      <div class="handle-ui"></div>
    </div>
    <div class="resize-handle bottomleft" data-resize-dir="bottomleft">
      <div class="handle-ui"></div>
    </div>
    <div class="resize-handle bottomright" data-resize-dir="bottomright">
      <div class="handle-ui"></div>
    </div>
    <div class="size-tooltip">
      <span class="w">256</span>
      <span class="x">x</span>
      <span class="h">128</span>
    </div>
    <div class="measure-tooltip top"><span>0</span></div>
    <div class="measure-tooltip bottom"><span>0</span></div>
    <div class="measure-tooltip left"><span>0</span></div>
    <div class="measure-tooltip right"><span>0</span></div>
  </astro-figma>

  <style lang="scss">
    .container {
      cursor:
        url("/media/cursor-@1x.svg") 4 4,
        default;
      cursor:
        -webkit-image-set(url("/media/cursor-@2x.svg") 2x) 4 4,
        default;
      height: 100%;
      width: 100%;
      position: relative;

      &.measure {
        box-shadow: inset 0 0 0 1px var(--el-figma-measure-color);

        .measure-tooltip {
          display: block;
        }
      }
    }

    [data-icon="skills/Figma"] {
      position: relative;
      z-index: -1;
      display: block;
      width: 100%;
      height: 100%;
    }

    .editable-container {
      touch-action: none;
      -ms-touch-action: none;
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      border: 0.5px solid transparent;
      width: 50%;
      width: min(50%, 240px);

      &.dynamic {
        transform: none;
      }

      &:hover,
      &.edit-mode {
        cursor:
          url("/media/cursor-@1x.svg") 4 4,
          move;
        cursor:
          -webkit-image-set(url("/media/cursor-@2x.svg") 2x) 4 4,
          move;
        box-shadow: inset 0 0 0 1px var(--el-figma-editable-color);
        border: 0.5px solid var(--el-figma-editable-color);
      }

      &.edit-mode {
        .size-tooltip {
          display: flex;
        }
        .resize-handle {
          display: initial;
        }
      }

      &.flipped-w {
        svg {
          transform: scaleX(-1);
        }
      }

      &.flipped-h {
        svg {
          transform: scaleY(-1);
        }
      }

      &.flipped-w.flipped-h {
        svg {
          transform: scale(-1, -1);
        }
      }

      .size-tooltip {
        display: none;
        flex-direction: row;
        flex-wrap: nowrap;
        align-items: center;
        gap: var(--spacing-xs);

        position: absolute;
        bottom: -24px;
        left: 50%;
        transform: translateX(-50%);
        background-color: var(--el-figma-editable-color);
        border-radius: 2px;
        padding: 2px 4px;
        color: white;
        font-family: Trebuchet MS;
        letter-spacing: 0.2px;
        font-size: var(--font-size-caption);

        .x {
          font-size: 8px;
          font-weight: 600;
          position: relative;
        }
      }

      .measure-tooltip {
        display: none;
        position: absolute;
        &.left,
        &.right {
          top: 50%;
          transform: translateY(-50%);
          border-bottom: 1px solid var(--el-figma-measure-color);
        }
        &.top,
        &.bottom {
          left: 50%;
          transform: translateX(-50%);
          border-right: 1px solid var(--el-figma-measure-color);
        }

        span {
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          background-color: var(--el-figma-measure-color);
          border-radius: 2px;
          color: white;
          padding: 2px 4px;
          font-family: Trebuchet MS;
          letter-spacing: 0.2px;
          font-size: var(--font-size-caption);
        }
      }

      $handle-size: 8px;
      $handle-touchable-padding: 8px;
      $handle-total-size: $handle-size + $handle-touchable-padding * 2;

      .resize-handle {
        display: none;
        position: absolute;
        padding: $handle-touchable-padding;

        .handle-ui {
          background-color: white;
          border: 1.5px solid var(--el-figma-editable-color);
          width: $handle-size;
          height: $handle-size;
        }

        &.topleft {
          cursor: nwse-resize;
          top: calc($handle-total-size / 2 * -1);
          left: calc($handle-total-size / 2 * -1);
        }

        &.topright {
          cursor: nesw-resize;
          top: calc($handle-total-size / 2 * -1);
          right: calc($handle-total-size / 2 * -1);
        }

        &.bottomleft {
          cursor: nesw-resize;
          bottom: calc($handle-total-size / 2 * -1);
          left: calc($handle-total-size / 2 * -1);
        }

        &.bottomright {
          cursor: nwse-resize;
          bottom: calc($handle-total-size / 2 * -1);
          right: calc($handle-total-size / 2 * -1);
        }
      }
    }
  </style>

  <script>
    import ResizableElement from "./scripts/ResizableElement";
    import DraggableElement from "./scripts/DraggableElement";
    import measureToParent from "./scripts/measureToParent";

    class FigmaInteractiveElement extends HTMLElement {
      private parent: HTMLElement;

      private tooltips!: {
        width: HTMLElement;
        height: HTMLElement;
        measureTop: HTMLElement;
        measureBottom: HTMLElement;
        measureLeft: HTMLElement;
        measureRight: HTMLElement;
      };

      constructor() {
        super();
        this.parent = this.parentElement as HTMLElement;
        this.setupStyle();
        this.setupTooltips();
        this.setupEventListeners();
      }

      private setupStyle() {
        const centeredLeft = this.parent.clientWidth / 2 - this.clientWidth / 2;
        const centeredTop =
          this.parent.clientHeight / 2 - this.clientHeight / 2;

        this.classList.add("dynamic");
        this.style.left = this.getLeftPercent(centeredLeft);
        this.style.top = this.getTopPercent(centeredTop);
      }

      private setupTooltips() {
        const width = this.querySelector(".w") as HTMLElement;
        if (!width) throw new Error("Missing width tooltip");
        const height = this.querySelector(".h") as HTMLElement;
        if (!height) throw new Error("Missing height tooltip");
        const measureTop = this.querySelector(
          ".measure-tooltip.top"
        ) as HTMLElement;
        if (!measureTop) throw new Error("Missing top measure tooltip");
        const measureLeft = this.querySelector(
          ".measure-tooltip.left"
        ) as HTMLElement;
        if (!measureLeft) throw new Error("Missing left measure tooltip");
        const measureRight = this.querySelector(
          ".measure-tooltip.right"
        ) as HTMLElement;
        if (!measureRight) throw new Error("Missing right measure tooltip");
        const measureBottom = this.querySelector(
          ".measure-tooltip.bottom"
        ) as HTMLElement;
        if (!measureBottom) throw new Error("Missing bottom measure tooltip");

        this.tooltips = {
          width,
          height,
          measureTop,
          measureLeft,
          measureRight,
          measureBottom,
        };

        this.updateSize();
        this.updateMeasureTooltip();
      }

      private setupEventListeners() {
        document.addEventListener("keydown", (e: KeyboardEvent) =>
          this.parent.classList.toggle("measure", e.altKey)
        );
        document.addEventListener("keyup", (e: KeyboardEvent) => {
          this.parent.classList.toggle("measure", e.altKey);
        });
        window.addEventListener("resize", () => {
          if (!this.classList.contains("activated")) {
            this.setupStyle();
          }
          this.updateSize();
          this.updateMeasureTooltip();
        });
        document.addEventListener("pointerdown", (e) =>
          this.setEditionMode(this.isOnThis(e))
        );

        const resizable = new ResizableElement({
          bounds: this.parent,
          element: this,
          handlers: Array.from(this.querySelectorAll(".resize-handle")),
        });

        const draggable = new DraggableElement(this, this.parent);

        resizable.onResizeStart(this.disableUserSelection);
        resizable.onResize(() => {
          this.updateSize();
          this.updateMeasureTooltip();
        });
        resizable.onResizeEnd(this.enableUserSelection);
        draggable.onDragStart(this.disableUserSelection);
        draggable.onDrag(() => this.updateMeasureTooltip());
        draggable.onDragEnd(this.enableUserSelection);
      }

      private disableUserSelection() {
        document.body.style.userSelect = "none";
      }

      private enableUserSelection() {
        document.body.style.userSelect = "initial";
      }

      private updateSize() {
        this.tooltips.width?.replaceChildren(String(this.clientWidth));
        this.tooltips.height?.replaceChildren(String(this.clientHeight));
      }

      private updateMeasureTooltip() {
        const measures = measureToParent(this);

        const top = this.tooltips.measureTop;
        top.style.top = -measures.top + "px";
        top.style.height = measures.top + "px";
        this.setMeasureTooltipContent(top, measures.top);

        const left = this.tooltips.measureLeft;
        left.style.left = -measures.left + "px";
        left.style.width = measures.left + "px";
        this.setMeasureTooltipContent(left, measures.left);

        const right = this.tooltips.measureRight;
        right.style.right = -measures.right + "px";
        right.style.width = measures.right + "px";
        this.setMeasureTooltipContent(right, measures.right);

        const bottom = this.tooltips.measureBottom;
        bottom.style.bottom = -measures.bottom + "px";
        bottom.style.height = measures.bottom + "px";
        this.setMeasureTooltipContent(bottom, measures.bottom);
      }

      private setMeasureTooltipContent(
        element: HTMLElement,
        content: string | number
      ) {
        if (!element.firstElementChild) return;
        element.firstElementChild.textContent = content + "";
      }

      private setEditionMode(active: boolean) {
        this.classList.add("activated");
        this.classList.toggle("edit-mode", active);
      }

      private getLeftPercent(left: number): string {
        return `${(left / this.parent.clientWidth) * 100}%`;
      }

      private getTopPercent(top: number): string {
        return `${(top / this.parent.clientHeight) * 100}%`;
      }
      private isOnThis(e: Event): boolean {
        return this.contains(e.target as Node);
      }
    }

    customElements.define("astro-figma", FigmaInteractiveElement);
  </script>
</div>
