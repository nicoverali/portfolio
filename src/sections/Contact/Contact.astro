---
import Button from "@components/Button/Button.astro";
import Footer from "@components/Footer/Footer.astro";
import LinkButton from "@components/LinkButton/LinkButton.astro";
---

<astro-contact class="container">
  <div class="header">
    <p>Got something great in mind ?</p>
    <p>Let's build together.</p>
  </div>

  <div class="email">
    <div class="button-container">
      <Button
        ><span class="text" translate="no">nicolasalevera98@gmail.com</span><span
          class="hidden">Copied!</span
        ></Button
      >
    </div>
    <p class="sub">Click to copy</p>
  </div>

  <div class="links">
    <LinkButton href="/Nicolas_Vera_CV.pdf" target="_blank">CV</LinkButton>
    <LinkButton href="https://github.com/nicoverali" target="_blank"
      >Github</LinkButton
    >
    <LinkButton href="https://www.linkedin.com/in/nicolasavera/" target="_blank"
      >LinkedIn</LinkButton
    >
  </div>

  <Footer />
</astro-contact>

<style lang="scss">
  @import "../../styles/screens.scss";

  .container {
    height: 100vh;
    display: flex;
    flex-direction: column;
    padding-bottom: var(--spacing-lg);
  }

  .header {
    margin-top: auto;
    font-size: var(--font-size-h1);
    font-weight: 500;
    line-height: 150%;

    @media screen and (max-width: $screen-sm-min) {
      margin-top: var(--spacing-4xl);
    }

    p {
      text-wrap: balanced;
      text-wrap: pretty;
    }
  }

  .email {
    cursor: pointer;
    margin-top: var(--spacing-lg);
    font-size: var(--font-size-text);
    font-weight: 600;

    .button-container {
      overflow: hidden;
    }

    .hidden {
      position: absolute;
      top: 100%;
      text-decoration: none;
    }

    .sub {
      margin-top: var(--spacing-md);
      font-size: var(--font-size-caption);
      font-weight: 400;
      opacity: 0.6;
    }
  }

  .links {
    margin-top: auto;
    margin-bottom: var(--spacing-xl);
    display: flex;
    flex-direction: row;
    gap: var(--spacing-lg);
  }
</style>

<script>
  import { gsap } from "gsap";
  import { triggerEvent } from "@scripts/analytics/analytics";
  import { copyToClipboard } from "@scripts/clipboard";

  class Contact extends HTMLElement {
    constructor() {
      super();
      this.setupAnimations();
      this.setupAnalytics();
    }

    private setupAnalytics() {
      this.querySelector(".email")?.addEventListener("click", () => {
        triggerEvent("email-copied");
      });

      this.querySelectorAll(".links a")?.forEach((link) => {
        link.addEventListener("click", () => {
          triggerEvent({
            name: "contact-link-out",
            payload: {
              href: link.getAttribute("href") ?? "unknown",
            },
          });
        });
      });
    }

    private setupAnimations() {
      const emailButton = this.querySelector(".email");
      const email = emailButton?.querySelector(".text");
      const hiddenText = emailButton?.querySelector(".hidden");

      if (!email || !hiddenText) return;

      const animation = this.getShowHiddenTextAnimation(email, hiddenText);

      emailButton?.addEventListener("click", () => {
        copyToClipboard(email.innerHTML);
        animation.restart();
      });
    }

    private getShowHiddenTextAnimation(
      email: Element,
      hiddenText: Element
    ): gsap.core.Timeline {
      const tl = gsap.timeline({ paused: true });

      tl.to(email, {
        duration: 0.2,
        yPercent: -200,
      });

      tl.to(
        hiddenText,
        {
          duration: 0.2,
          ease: "back.out(1)",
          top: "50%",
          yPercent: -50,
        },
        "<"
      );

      tl.to(hiddenText, {
        delay: 1.5,
        duration: 0.2,
        top: 0,
        yPercent: -200,
      });

      tl.set(email, { yPercent: 100 });
      tl.to(email, {
        ease: "back.out(1)",
        duration: 0.2,
        yPercent: 0,
      });
      tl.set(hiddenText, {
        clearProps: "all",
      });

      return tl;
    }
  }

  customElements.define("astro-contact", Contact);
</script>
