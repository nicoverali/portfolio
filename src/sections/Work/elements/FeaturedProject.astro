---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import BrowserMockup from "./BrowserMockup.astro";

interface Props {
  project: CollectionEntry<"projects">;
}

const { project } = Astro.props;
const { featured, name, short, techs } = project.data;
---

<astro-featured-project class="container">
  <div class="image-container">
    {
      featured.hasMockup ? (
        <Image src={featured.image} alt={`Screenshot of ${name} app`} />
      ) : (
        <BrowserMockup>
          <Image src={featured.image} alt={`Screenshot of ${name} app`} />
        </BrowserMockup>
      )
    }
  </div>

  <div class="bottom">
    <h3>{short}</h3>
    <p class="techs">{techs.join(", ")}</p>
  </div>
</astro-featured-project>

<style
  lang="scss"
  define:vars={{
    color: featured.color,
    colorDark: featured.colorDark ?? featured.color,
  }}
>
  .container {
    position: relative;
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .image-container {
    position: relative;
    overflow: hidden;
    width: 100%;
    display: flex;
    border-radius: var(--radius-md);
    background-color: var(--color, #f1f1f1);
    padding: var(--spacing-3xl) var(--spacing-2xl);

    &:hover {
      background-color: var(--colorDark, #f1f1f1);
    }

    img {
      display: block;
      opacity: 0.9;
      width: 100%;
      height: auto;
      object-fit: cover;
      object-position: 50% 50%;
      flex: 1;
      transition: opacity 200ms ease;
    }
  }

  img:hover {
    opacity: 1;
  }

  .bottom {
    margin-top: var(--spacing-md);

    h3 {
      font-size: var(--font-size-text);
      font-weight: 400;
      margin-bottom: var(--spacing-sm);
    }

    .techs {
      font-size: var(--font-size-text-small);
      font-weight: 400;
      opacity: 0.6;
    }

    .links {
      margin-top: var(--spacing-lg);
    }
  }
</style>

<script>
  import { gsap } from "gsap";

  class FeaturedProject extends HTMLElement {
    constructor() {
      super();

      const cursor = this.querySelector<HTMLElement>(".project-cursor");
      const thisRect = this.getBoundingClientRect();

      if (!cursor) return;

      gsap.context(() => {
        gsap.set(cursor, { scale: 0, opacity: 0 });

        this.addEventListener("mouseenter", () => {
          gsap.to(cursor, {
            scale: 1,
            opacity: 1,
            overwrite: "auto",
            ease: "bounce.out",
          });
        });

        const moveX = gsap.quickTo(cursor, "x", { duration: 0.2 });
        const moveY = gsap.quickTo(cursor, "y", { duration: 0.2 });

        this.addEventListener("mousemove", (e: MouseEvent) => {
          const thisRect = this.getBoundingClientRect();
          const cursorRect = cursor.getBoundingClientRect();
          moveX(e.x - thisRect.left - cursorRect.width / 2);
          moveY(e.y - thisRect.top - cursorRect.height / 2);
        });

        this.addEventListener("mouseleave", () => {
          gsap.to(cursor, {
            scale: 0,
            opacity: 0,
            duration: 0.1,
            overwrite: "auto",
            ease: "power3.in",
          });
        });
      }, this);
    }
  }

  customElements.define("astro-featured-project", FeaturedProject);
</script>
