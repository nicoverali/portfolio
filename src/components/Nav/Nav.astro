---
import Container from "@components/Grid/Container.astro";
import LinkButton from "@components/LinkButton/LinkButton.astro";
import MenuIcon from "./elements/MenuIcon.astro";

export interface NavItem {
  name: string;
  target: number | string;
}

interface Props {
  nav?: NavItem[];
}

const { nav } = Astro.props;
---

<nav>
  <ul class="desktop">
    {
      nav?.map((item) => (
        <li>
          <LinkButton data-scroll-to={item.target}>{item.name}</LinkButton>
        </li>
      ))
    }
  </ul>

  <div class="mobile-menu-toggle">
    <MenuIcon />
  </div>

  <astro-mobile-menu>
    <Container>
      <ul>
        {
          nav?.map((item) => (
            <li>
              <LinkButton size="h2" data-scroll-to={item.target}>
                {item.name}
              </LinkButton>
            </li>
          ))
        }
      </ul>
    </Container>
  </astro-mobile-menu>
</nav>

<style lang="scss">
  @import "../../styles/screens.scss";

  nav ul.desktop {
    display: flex;
    flex-direction: row;
    gap: var(--spacing-4xl);

    @media screen and (max-width: $screen-md-min) {
      display: none;
    }
  }

  .mobile-menu-toggle {
    position: relative;
    display: none;
    width: 48px;
    height: 48px;
    z-index: 2;

    @media screen and (max-width: $screen-md-min) {
      display: block;
    }
  }

  astro-mobile-menu {
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    padding-top: calc(var(--el-header-height) + var(--spacing-2xl));
    background-color: var(--el-mobile-nav-background);
    color: var(--el-mobile-nav-color);
    z-index: 1;
    clip-path: inset(0% -100% 0% 100%);

    ul {
      display: flex;
      flex-direction: column;
      gap: var(--spacing-3xl);
      font-size: var(--font-size-h2);
      font-weight: 500;
      color: var(--color-text-on-primary);
    }
  }
</style>

<script>
  import { gsap } from "gsap";
  import { scrollTo } from "@scripts/scroll";
  import { isMobileNavOpen } from "@scripts/stores";

  const nav = document.querySelector("nav");
  const navItems = nav?.querySelectorAll<HTMLElement>("[data-scroll-to]") ?? [];

  for (const item of navItems) {
    const rawTarget = item.dataset.scrollTo;
    if (!rawTarget) continue;

    const target = !isNaN(parseFloat(rawTarget))
      ? parseFloat(rawTarget)
      : rawTarget;

    item.addEventListener("click", () => {
      scrollTo(target);
    });
  }

  class MobileMenu extends HTMLElement {
    constructor() {
      super();

      const toggleButton = nav?.querySelector<HTMLElement>(
        ".mobile-menu-toggle"
      );

      this.querySelectorAll("li").forEach((item) => {
        item.addEventListener("click", () => isMobileNavOpen.set(false));
      });

      window.addEventListener("resize", () =>
        isMobileNavOpen.set(window.innerWidth <= 1024 && isMobileNavOpen.get())
      );

      toggleButton?.addEventListener("click", () =>
        isMobileNavOpen.set(!isMobileNavOpen.get())
      );

      gsap.context(() => {
        const tl = gsap.timeline({ paused: true });
        tl.to(this, {
          duration: 0.5,
          clipPath: "inset(0% 0% 0% 0%)",
        });
        tl.fromTo(
          "li",
          {
            y: 50,
            clipPath: "inset(-100% 0% 100% 0%)",
          },
          {
            duration: 1,
            ease: "power2.inOut",
            y: 0,
            clipPath: "inset(0% 0% 0% 0%)",
          },
          ">-=0.4"
        );

        isMobileNavOpen.subscribe((isMobileNavOpen) => {
          isMobileNavOpen ? tl.play() : tl.reverse();
        });
      }, this);
    }
  }

  customElements.define("astro-mobile-menu", MobileMenu);
</script>
