---
import SmallSkillBox from "../SmallSkillBox/SmallSkillBox.astro";

const rows = [
  {
    NextJs: "Next.js",
    NestJs: "Nest.js",
    Tailwind: "Tailwind",
    Spring: "Spring",
  },
  {
    Astro: "Astro",
    Swagger: "Swagger",
    Github: "Github",
    Postman: "Postman",
    Docker: "Docker",
  },
  {
    Python: "Python",
    Go: "Go",
    Oracle: "OracleDB",
    MongoDb: "Mongo",
    PostgreSQL: "PostgreSQL",
  },
] as const;
---

<astro-all-skills class="icons">
  {
    rows.map((row) => (
      <div class="list">
        {Object.entries(row).map(([key, display]) => (
          <SmallSkillBox name={`skills/${key}`} displayName={display} />
        ))}
        <div class="drag-proxy" />
      </div>
    ))
  }
</astro-all-skills>

<style lang="scss">
  @import "../../../../styles/screens.scss";

  .icons {
    position: relative;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    align-items: center;
    overflow: hidden;
    padding: var(--spacing-lg) 0;

    &::after {
      content: "";
      position: absolute;
      width: 100%;
      height: 100%;
      pointer-events: none;
      box-shadow:
        inset -24px 0 48px 16px var(--color-paper-on-background),
        inset 24px 0 48px 16px var(--color-paper-on-background);

      @media screen and (max-width: $screen-sm-min) {
        box-shadow:
          inset -16px 0 32px 8px var(--color-paper-on-background),
          inset 16px 0 32px 8px var(--color-paper-on-background);
      }
    }
  }
  .list {
    position: relative;
    display: flex;
    flex-direction: row;
    gap: var(--spacing-sm);
  }

  .drag-proxy {
    position: absolute;
    width: 100%;
    height: 100%;
    z-index: 1;
  }
</style>

<script>
  import InfiniteListAnimation from "./scripts/InfiniteListAnimation";
  import moveListWithDraggable from "./scripts/moveListWithDraggable";

  class AstroAllSkills extends HTMLElement {
    private lists: Array<HTMLElement>;

    constructor() {
      super();
      this.lists = Array.from(this.querySelectorAll<HTMLElement>(".list"));
      this.setupAnimations();
    }

    private setupAnimations() {
      for (const list of this.lists) {
        const skills = Array.from(list.children).filter(
          (c) => !c.classList.contains("drag-proxy")
        );
        const animation = new InfiniteListAnimation(list, skills, {
          elementsMargin: 8,
        });

        animation.play();

        const draggable = list.querySelector<HTMLElement>(".drag-proxy");
        if (draggable) {
          moveListWithDraggable(animation, draggable);
        }
      }
    }
  }

  customElements.define("astro-all-skills", AstroAllSkills);
</script>
