---
import FeaturedProject from "./elements/FeaturedProject.astro";
import { getCollection } from "astro:content";
import SectionTitle from "@components/SectionTitle/SectionTitle.astro";
import Row from "@components/Grid/Row.astro";
import Column from "@components/Grid/Column.astro";

const allProjects = await getCollection("projects");
const evenProjects = allProjects.filter((_, i) => i % 2 == 0);
const oddProjects = allProjects.filter((_, i) => i % 2 != 0);
---

<div class="container">
  <SectionTitle>See my work</SectionTitle>

  <astro-projects-grid>
    <Row class="double-col-row">
      <Column>
        {
          oddProjects.map((project) => (
            <div class="project-container">
              <FeaturedProject project={project} />
            </div>
          ))
        }
      </Column>
      <Column>
        {
          evenProjects.map((project) => (
            <div class="project-container">
              <FeaturedProject project={project} />
            </div>
          ))
        }
      </Column>
    </Row>
    <Row class="single-col-row">
      <Column>
        {
          allProjects.map((project) => (
            <div class="project-container">
              <FeaturedProject project={project} />
            </div>
          ))
        }
      </Column>
    </Row>
  </astro-projects-grid>
</div>

<style lang="scss">
  @import "../../styles/variables.scss";
  @import "../../styles/screens.scss";

  astro-projects-grid {
    display: block;
    margin-top: var(--spacing-3xl);

    .project-container:not(:first-child) {
      margin-top: var(--spacing-5xl);
    }

    .double-col-row > *:nth-child(2) .project-container:first-child {
      margin-top: var(--spacing-5xl);
    }

    .single-col-row {
      display: none;
    }

    @media screen and (max-width: $screen-md-min) {
      .double-col-row {
        display: none;
      }
      .single-col-row {
        display: block;
      }
    }
  }
</style>

<script>
  import { vhPercent } from "@scripts/utils/gsap";
  import { gsap } from "gsap";

  class ProjectsGridContainer extends HTMLElement {
    constructor() {
      super();

      gsap.context(() => {
        const projects = gsap.utils.toArray<HTMLElement>(".project-container");

        for (const project of projects) {
          gsap.from(project, {
            scale: 0.9,
            opacity: 0.4,
            y: 100,
            scrollTrigger: {
              trigger: project,
              start: "top " + vhPercent(100),
              end: "top " + vhPercent(60),
              scrub: 1,
            },
          });
        }
      }, this);
    }
  }

  customElements.define("astro-projects-grid", ProjectsGridContainer);
</script>
